from django.views.generic import TemplateView, CreateView
from django.shortcuts 	  import render_to_response, get_object_or_404
from django.template  	  import RequestContext
from django.http      	  import HttpResponseRedirect  
from django.db.models     import Count, Avg

from django.core.urlresolvers import reverse_lazy

'''Librerias de Authentication '''

from django.contrib.auth 			 import login,logout,authenticate
from django.contrib.auth.models      import User
from django.contrib.auth.forms 		 import UserCreationForm, AuthenticationForm
from django.contrib.auth.decorators	 import login_required

'''Librerias App'''

from registro_estudiantes_oym.apps.home.forms      import LoginForm, sugerencias
from registro_estudiantes_oym.apps.registro.models import Estudiante, Correo, Materia, CapituloMateria, Seccion, TextoPrincipal, Profesor, Periodo, Calificacion, Grupo

def index_view(request):
    materia 	= Materia.objects.filter(id=2)        	 # Select * from materias
    cap_mat     = CapituloMateria.objects.all()
    texto   	= TextoPrincipal.objects.all()	 # Despliega el texto de la pagina principal
    seccion    	= Seccion.objects.all()
    nom_prof    = Profesor.objects.all()
    periodo     = Periodo.objects.all()
    ctx         = {'materia':materia, 'cap_mat':cap_mat,'texto':texto, 'seccion':seccion, 'nom_prof':nom_prof}

    return render_to_response('home/index.html',ctx,context_instance=RequestContext(request))

def login_view(request):
	#mensaje = ""
	if request.user.is_authenticated():
		return HttpResponseRedirect('/temas/')
	if request.method == "POST":
			form = LoginForm(request.POST)
			if form.is_valid():
				username = form.cleaned_data['username']
				password = form.cleaned_data['password']
				usuario  = authenticate(username=username, password=password)
				if usuario is not None and usuario.is_active:
					login(request,usuario)
					return HttpResponseRedirect('/temas/')

				else:
					return HttpResponseRedirect('/login/')
			else:
				return render_to_response('home/login.html',{'form':form},context_instance=RequestContext(request))
	else:
		form = LoginForm()
		ctx  = {'form':form}

		return render_to_response('home/login.html',ctx,context_instance=RequestContext(request))

def logout_view(request):
	logout(request)
	return HttpResponseRedirect('/')

#@login_required(login_url = '/login/')
class RegistrarEstudiante(CreateView):
    template_name = 'home/registro_estudiantes.html'
    model = Estudiante
    success_url = reverse_lazy('vista_reg_estudiante')
    
    def post(self, request, *args, **kwargs):
    	return render_to_response('home/registro_estudiantes.html')
        estado = False
        estudiante = Estudiante()
        Estudiante.matricula = request.POST['matricula']
        Estudiante.nombre    = request.POST['nombre']
        Estudiante.apellido	 = request.POST['apellido']
        Estudiante.genero    = request.POST['genero']
        Estudiante.correo    = request.POST['correo']
        Estudiante.telefono  = request.POST['telefono']
        Estudiante.foto	     = request.FILES ['foto']
        estudiante.save()
        estado = True
        std = {'estado':estado}

        return render_to_response('templates/registro_estudiantes.html',std,context_instance=RequestContext(request))

@login_required(login_url = '/login/')
def registrados_view(request):
	mensaje = 'Listado estudiantes registrados'
	est     = Estudiante.objects.all()
	correo  = Correo.objects.all()
	grupo   = Grupo.objects.all()
	ctx 	= {'msg':mensaje, 'correo':correo, 'est':est, 'grupo':grupo}

	return render_to_response('home/estudiantes_registrados.html',ctx,context_instance=RequestContext(request))

@login_required(login_url = '/login/')
def sugerencias_view(request):
	enviarInfo = False
	titulo = ""
	sugerencia = ""
	if request.method == "POST":
		formulario = sugerencias(request.POST)
		if formulario.is_valid():
			enviarInfo = True
			titulo = formulario.clean_data['titulo']
			sugerencia = formulario.clean_data['sugerencia']
	else:
		formulario = buzonSugerencias()
		ctx = {'form':formulario, 'titulo':titulo, 'sugerencia':sugerencia}

		return render_to_response('home/buzon_sugerencias.html',ctx,context_instance=RequestContext(request))

@login_required(login_url = '/login/')
def cert_gallery_view(request):
	return render_to_response('home/galeria_certificados.html',context_instance=RequestContext(request))

def biblioteca_view(request):
	mensaje = 'Indice de Temas Sistema Operativo de Redes'
	ctx 	= {'msg':mensaje}

	return render_to_response('home/biblioteca.html',ctx,context_instance=RequestContext(request))

@login_required(login_url = '/login/')
def capitulos_temas_view(request):
	materia   = Materia.objects.all()
	capitulo  = CapituloMateria.objects.values('titulo')
	num_cap   = CapituloMateria.objects.values('num_capitulo')
	cont_cap  = CapituloMateria.objects.values('contenido')
	ctx       = {'materia':materia, 'capitulo':capitulo, 'num_cap':num_cap, 'cont_cap':cont_cap}
	return render_to_response('home/indice_temas.html',ctx,context_instance=RequestContext(request))

@login_required(login_url = '/login/')
def audiovisuales_view(request):
	return render_to_response('home/audiovisuales.html',context_instance=RequestContext(request))

@login_required(login_url = '/login/')
def rep_calificaciones_view(request):
	#calificacion = Calificacion.objects.all()
	conteo_std    = Estudiante.objects.count()
	prom_asis     = Calificacion.objects.all().aggregate(Avg('asistencia'))
	prom_prct     = Calificacion.objects.all().aggregate(Avg('pract_ind_1'))
	prom_prcl     = Calificacion.objects.all().aggregate(Avg('parcial'))
	prom_fnl      = Calificacion.objects.all().aggregate(Avg('final'))
	ctx           = {'conteo_std':conteo_std, 'prom_asis':prom_asis, 'prom_prcl':prom_prcl, 'prom_fnl':prom_fnl} 
	return render_to_response('home/reporte_calificaciones.html',ctx,context_instance=RequestContext(request))

def about_view(request):
	mensaje = 'Aplicacion de control de estudiantes...creada por Kennedy Sanchez para uso personal'
	ctx = {'msg':mensaje}

	return render_to_response('home/about.html',ctx,context_instance=RequestContext(request))
